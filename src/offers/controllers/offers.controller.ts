import { Controller, Get, Post, Patch, Body, Param, Query, UseGuards } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../../auth/guards/roles.guard';
import { Roles } from '../../auth/decorators/roles.decorator';
import { Role } from '../../auth/enums/role.enum';
import { OffersService } from '../services/offers.service';
import { CreateOfferDto } from '../dto/create-offer.dto';
import { UpdateOfferDto } from '../dto/update-offer.dto';
import { OverrideAutoOfferDto } from '../dto/override-auto-offer.dto';

@ApiTags('Offers')
@ApiBearerAuth()
@Controller('offers')
@UseGuards(JwtAuthGuard, RolesGuard)
export class OffersController {
  constructor(private readonly offersService: OffersService) {}

  @Post()
  @Roles(Role.BUYER)
  @ApiOperation({ summary: 'Create a new offer' })
  @ApiResponse({ status: 201, description: 'Offer has been successfully created' })
  async create(@Body() createOfferDto: CreateOfferDto) {
    return this.offersService.create(createOfferDto);
  }

  @Get('auto-generated')
  @ApiOperation({ summary: 'Get auto-generated offers' })
  @ApiResponse({ status: 200, description: 'Returns auto-generated offers' })
  async getAutoGenerated(
    @Query('produceId') produceId?: string,
    @Query('buyerId') buyerId?: string,
  ) {
    return this.offersService.findAutoGenerated(produceId, buyerId);
  }

  @Patch(':id/override')
  @Roles(Role.BUYER)
  @ApiOperation({ summary: 'Override an auto-generated offer' })
  @ApiResponse({ status: 200, description: 'Offer has been successfully overridden' })
  async override(
    @Param('id') id: string,
    @Body() overrideDto: OverrideAutoOfferDto,
  ) {
    return this.offersService.overrideAutoOffer(id, overrideDto);
  }

  @Get('auto-generated/expired')
  @ApiOperation({ summary: 'Get expired auto-generated offers' })
  @ApiResponse({ status: 200, description: 'Returns expired auto-generated offers' })
  async getExpiredAutoOffers(
    @Query('buyerId') buyerId?: string,
    @Query('produceId') produceId?: string,
  ) {
    return this.offersService.findExpiredAutoOffers(buyerId, produceId);
  }

  @Get('auto-generated/queue/:produceId')
  @ApiOperation({ summary: 'Get auto-offer queue status for a produce' })
  @ApiResponse({ status: 200, description: 'Returns queue status' })
  async getQueueStatus(@Param('produceId') produceId: string) {
    return this.offersService.getAutoOfferQueueStatus(produceId);
  }

  @Patch(':id/status')
  @ApiOperation({ summary: 'Update offer status' })
  @ApiResponse({ status: 200, description: 'Offer status has been updated' })
  async updateStatus(
    @Param('id') id: string,
    @Body() updateOfferDto: UpdateOfferDto,
  ) {
    return this.offersService.updateStatus(id, updateOfferDto);
  }
} 